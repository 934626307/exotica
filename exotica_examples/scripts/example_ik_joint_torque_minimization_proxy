#!/usr/bin/env python
from __future__ import print_function

import pyexotica as exo
from numpy import array
from numpy import matrix
import math
from pyexotica.publish_trajectory import *
import exotica_scipy_solver
from time import sleep, time
import signal


def figure_eight(t):
    return array([0.6, -0.1 + math.sin(t * 2.0 * math.pi * 0.5) * 0.1, 0.5 + math.sin(t * math.pi * 0.5) * 0.2,0,0,0])


use_scipy_solver = True

exo.Setup.init_ros()

problem = None
solver = None
if use_scipy_solver:
    problem = exo.Setup.load_problem('{exotica_examples}/resources/configs/example_ik_joint_torque_minimization_proxy.xml')
    solver = exotica_scipy_solver.SciPyEndPoseSolver(problem, method='SLSQP')
else:
    # Requires to uncomment one of the C++ solvers in the XML
    solver = exo.Setup.load_solver(
        '{exotica_examples}/resources/configs/example_ik_joint_torque_minimization_proxy.xml')
    problem = solver.get_problem()

dt = 0.002
t = 0.0
q = array([0.0] * 7)
print('Publishing IK')
signal.signal(signal.SIGINT, sig_int_handler)
while True:
    try:
        problem.set_goal_eq('Position', figure_eight(t))
        problem.start_state = q
        s = time()
        q = solver.solve()[0]
        e = time()
        print("Time taken", e-s)
        publish_pose(q, problem)
        sleep(dt)
        t = t + dt
    except KeyboardInterrupt:
        break
