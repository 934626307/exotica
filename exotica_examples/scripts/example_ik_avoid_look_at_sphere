#!/usr/bin/env python
import rospy
import pyexotica as exo
import numpy as np
import signal
from pyexotica.publish_trajectory import publish_pose, sig_int_handler
from exotica_examples_py import *
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Point
import exotica_scipy_solver

DT = 1.0 / 100.0 # 100 HZ

class Example(object):

    def __init__(self):

        # Set init variables
        self.q = np.array([0.0] * 7)

        # Setup exotica
        self.problem = exo.Setup.load_problem('{exotica_examples}/resources/configs/example_ik_avoid_look_at_sphere.xml')
        self.solver = exotica_scipy_solver.SciPyEndPoseSolver(problem=self.problem, method='SLSQP', debug=False)

        # Setup ros marker publisher
        self.pub = rospy.Publisher('environment', MarkerArray, queue_size=1)
        self.target_marker = TargetMarker(pose=self.problem.get_scene().fk('LookAtTarget').get_translation(), marker_shape=2, marker_size=[0.1, 0.1, 0.1])

    def update(self, event):
        # Set new look at target into world frame
        self.problem.get_scene().attach_object_local('LookAtTarget', '', self.target_marker.position_exo)

        # Set start state
        qold = self.q.copy()
        self.problem.start_state = self.q

        # Solve and publish
        self.q = self.solver.solve()[0]
        publish_pose(self.q, self.problem)

    def update_environment(self, event):

        arrow = Marker()
        arrow.header.frame_id = 'exotica/lwr_arm_6_link'
        arrow.id = 0
        arrow.type = Marker.ARROW
        arrow.action = Marker.ADD
        arrow.scale.x = 0.02
        arrow.scale.y = 0.05
        arrow.scale.z = 0.05
        end_pt = Point()
        look_at_position = self.problem.get_scene().fk('LookAtTarget', 'lwr_arm_6_link').get_translation()
        end_pt.x = look_at_position[0]
        end_pt.y = look_at_position[1]
        end_pt.z = look_at_position[2]
        arrow.points = [Point(), end_pt]
        arrow.color.b = arrow.color.a = 1.0

        markerarray = MarkerArray()
        markerarray.markers = [arrow]

        self.pub.publish(markerarray)

if __name__=='__main__':
    rospy.init_node('example_ik_avoid_look_at_sphere_node')
    exo.Setup.init_ros()
    signal.signal(signal.SIGINT, sig_int_handler)
    example = Example()
    rospy.Timer(rospy.Duration(DT), example.update)
    rospy.Timer(rospy.Duration(1.0/40.0), example.update_environment)
    rospy.spin()
