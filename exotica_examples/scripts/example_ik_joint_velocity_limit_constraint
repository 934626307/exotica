#!/usr/bin/env python

import pyexotica as exo
from numpy import array
import math
from pyexotica.publish_trajectory import *
import exotica_core_task_maps_py
import exotica_scipy_solver
from time import sleep
import signal


def figure_eight(t):
    return array([0.6, -0.1 + math.sin(t * 2.0 * math.pi * 0.5) * 0.1, 0.5 + math.sin(t * math.pi * 0.5) * 0.2, 0, 0, 0])


exo.Setup.init_ros()
problem = exo.Setup.load_problem(
    '{exotica_examples}/resources/configs/example_ik_joint_velocity_limit_constraint.xml')
solver = exotica_scipy_solver.SciPyEndPoseSolver(problem, method="SLSQP")

dt = 0.002
t = 0.0
q = array([0.0] * 7)
print('Publishing IK')
signal.signal(signal.SIGINT, sig_int_handler)
while True:
    try:
        problem.set_goal('Position', figure_eight(t))
        problem.start_state = q
        problem.get_task_maps()['JointVel'].set_current_joint_state(q)
        q = solver.solve()
        publish_pose(q, problem)
        sleep(dt)
        t = t + dt
    except KeyboardInterrupt:
        break
